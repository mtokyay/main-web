{"ast":null,"code":"import _slicedToArray from\"/Users/mehmettokyay/Documents/new-theme-react/main-website/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _objectSpread from\"/Users/mehmettokyay/Documents/new-theme-react/main-website/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React from\"react\";import{useTheme,createTheme,ThemeProvider as MuiThemeProvider}from\"@material-ui/core/styles\";import*as colors from\"@material-ui/core/colors\";import CssBaseline from\"@material-ui/core/CssBaseline\";import useMediaQuery from\"@material-ui/core/useMediaQuery\";import{createLocalStorageStateHook}from\"use-local-storage-state\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var themeConfig={// Light theme\nlight:{palette:{type:\"light\",primary:{// Use hue from colors or hex\nmain:colors.indigo[\"500\"]// Uncomment to specify light/dark\n// shades instead of automatically\n// calculating from above value.\n//light: \"#4791db\",\n//dark: \"#115293\",\n},secondary:{main:colors.pink[\"500\"]},background:{// Background for <body>\n// and <Section color=\"default\">\ndefault:\"#fff\",// Background for elevated\n// components (<Card>, etc)\npaper:\"#fff\"}}},// Dark theme\ndark:{palette:{type:\"dark\",primary:{// Same as in light but we could\n// adjust color hue if needed\nmain:colors.indigo[\"500\"]},secondary:{main:colors.pink[\"500\"]},background:{default:colors.grey[\"900\"],paper:colors.grey[\"800\"]}}},// Values for both themes\ncommon:{typography:{fontSize:14,fontFamily:'\"Roboto\", \"Helvetica\", \"Arial\", sans-serif'// Uncomment to make button lowercase\n// button: { textTransform: \"none\" },\n},breakpoints:{values:{xs:0,sm:600,md:960,lg:1200,xl:1920}},// Override component styles\noverrides:{// Global styles\nMuiCssBaseline:{\"@global\":{\"#root\":{// Flex column that is height\n// of viewport so that footer\n// can push self to bottom by\n// with auto margin-top\nminHeight:\"100vh\",display:\"flex\",flexDirection:\"column\",// Prevent child elements from\n// shrinking when content\n// is taller than the screen\n// (quirk of flex parent)\n\"& > *\":{flexShrink:0}}}}}}};function getTheme(name){// Create MUI theme from themeConfig\nreturn createTheme(_objectSpread(_objectSpread(_objectSpread({},themeConfig[name]),themeConfig.common),{},{overrides:_objectSpread(_objectSpread({},themeConfig[name]&&themeConfig[name].overrides),themeConfig.common&&themeConfig.common.overrides)}));}// Create a local storage hook for dark mode preference\nvar useDarkModeStorage=createLocalStorageStateHook(\"isDarkMode\");export var ThemeProvider=function ThemeProvider(props){// Get system dark mode preference\nvar prefersDarkMode=useMediaQuery(\"(prefers-color-scheme: dark)\",{noSsr:true});// Get stored dark mode preference\nvar _useDarkModeStorage=useDarkModeStorage(),_useDarkModeStorage2=_slicedToArray(_useDarkModeStorage,2),isDarkModeStored=_useDarkModeStorage2[0],setIsDarkModeStored=_useDarkModeStorage2[1];// Use stored dark mode with fallback to system preference\nvar isDarkMode=isDarkModeStored===undefined?prefersDarkMode:isDarkModeStored;// Get MUI theme object\nvar themeName=isDarkMode?\"dark\":\"light\";var theme=getTheme(themeName);// Add toggle function to theme object\ntheme.palette.toggle=function(){return setIsDarkModeStored(function(value){return!value;});};return/*#__PURE__*/_jsxs(MuiThemeProvider,{theme:theme,children:[/*#__PURE__*/_jsx(CssBaseline,{}),props.children]});};// Hook for detecting dark mode and toggling between light/dark\n// More convenient than reading theme.palette.type from useTheme\nexport function useDarkMode(){// Get current Material UI theme\nvar theme=useTheme();// Check if it's the dark theme\nvar isDarkMode=theme.palette.type===\"dark\";// Return object containing dark mode value and toggle function\nreturn{value:isDarkMode,toggle:theme.palette.toggle};}","map":{"version":3,"names":["React","useTheme","createTheme","ThemeProvider","MuiThemeProvider","colors","CssBaseline","useMediaQuery","createLocalStorageStateHook","jsx","_jsx","jsxs","_jsxs","themeConfig","light","palette","type","primary","main","indigo","secondary","pink","background","default","paper","dark","grey","common","typography","fontSize","fontFamily","breakpoints","values","xs","sm","md","lg","xl","overrides","MuiCssBaseline","minHeight","display","flexDirection","flexShrink","getTheme","name","_objectSpread","useDarkModeStorage","props","prefersDarkMode","noSsr","_useDarkModeStorage","_useDarkModeStorage2","_slicedToArray","isDarkModeStored","setIsDarkModeStored","isDarkMode","undefined","themeName","theme","toggle","value","children","useDarkMode"],"sources":["/Users/mehmettokyay/Documents/new-theme-react/main-website/src/util/theme.js"],"sourcesContent":["import React from \"react\";\nimport {\n  useTheme,\n  createTheme,\n  ThemeProvider as MuiThemeProvider,\n} from \"@material-ui/core/styles\";\nimport * as colors from \"@material-ui/core/colors\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport { createLocalStorageStateHook } from \"use-local-storage-state\";\n\nconst themeConfig = {\n  // Light theme\n  light: {\n    palette: {\n      type: \"light\",\n      primary: {\n        // Use hue from colors or hex\n        main: colors.indigo[\"500\"],\n        // Uncomment to specify light/dark\n        // shades instead of automatically\n        // calculating from above value.\n        //light: \"#4791db\",\n        //dark: \"#115293\",\n      },\n      secondary: {\n        main: colors.pink[\"500\"],\n      },\n      background: {\n        // Background for <body>\n        // and <Section color=\"default\">\n        default: \"#fff\",\n        // Background for elevated\n        // components (<Card>, etc)\n        paper: \"#fff\",\n      },\n    },\n  },\n\n  // Dark theme\n  dark: {\n    palette: {\n      type: \"dark\",\n      primary: {\n        // Same as in light but we could\n        // adjust color hue if needed\n        main: colors.indigo[\"500\"],\n      },\n      secondary: {\n        main: colors.pink[\"500\"],\n      },\n      background: {\n        default: colors.grey[\"900\"],\n        paper: colors.grey[\"800\"],\n      },\n    },\n  },\n\n  // Values for both themes\n  common: {\n    typography: {\n      fontSize: 14,\n      fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n      // Uncomment to make button lowercase\n      // button: { textTransform: \"none\" },\n    },\n    breakpoints: {\n      values: {\n        xs: 0,\n        sm: 600,\n        md: 960,\n        lg: 1200,\n        xl: 1920,\n      },\n    },\n    // Override component styles\n    overrides: {\n      // Global styles\n      MuiCssBaseline: {\n        \"@global\": {\n          \"#root\": {\n            // Flex column that is height\n            // of viewport so that footer\n            // can push self to bottom by\n            // with auto margin-top\n            minHeight: \"100vh\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            // Prevent child elements from\n            // shrinking when content\n            // is taller than the screen\n            // (quirk of flex parent)\n            \"& > *\": {\n              flexShrink: 0,\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nfunction getTheme(name) {\n  // Create MUI theme from themeConfig\n  return createTheme({\n    ...themeConfig[name],\n    // Merge in common values\n    ...themeConfig.common,\n    overrides: {\n      // Merge overrides\n      ...(themeConfig[name] && themeConfig[name].overrides),\n      ...(themeConfig.common && themeConfig.common.overrides),\n    },\n  });\n}\n\n// Create a local storage hook for dark mode preference\nconst useDarkModeStorage = createLocalStorageStateHook(\"isDarkMode\");\n\nexport const ThemeProvider = (props) => {\n  // Get system dark mode preference\n  const prefersDarkMode = useMediaQuery(\"(prefers-color-scheme: dark)\", {\n    noSsr: true,\n  });\n\n  // Get stored dark mode preference\n  let [isDarkModeStored, setIsDarkModeStored] = useDarkModeStorage();\n\n  // Use stored dark mode with fallback to system preference\n  const isDarkMode =\n    isDarkModeStored === undefined ? prefersDarkMode : isDarkModeStored;\n\n  // Get MUI theme object\n  const themeName = isDarkMode ? \"dark\" : \"light\";\n  const theme = getTheme(themeName);\n\n  // Add toggle function to theme object\n  theme.palette.toggle = () => setIsDarkModeStored((value) => !value);\n\n  return (\n    <MuiThemeProvider theme={theme}>\n      {/* Set global MUI styles */}\n      <CssBaseline />\n      {props.children}\n    </MuiThemeProvider>\n  );\n};\n\n// Hook for detecting dark mode and toggling between light/dark\n// More convenient than reading theme.palette.type from useTheme\nexport function useDarkMode() {\n  // Get current Material UI theme\n  const theme = useTheme();\n  // Check if it's the dark theme\n  const isDarkMode = theme.palette.type === \"dark\";\n  // Return object containing dark mode value and toggle function\n  return { value: isDarkMode, toggle: theme.palette.toggle };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}