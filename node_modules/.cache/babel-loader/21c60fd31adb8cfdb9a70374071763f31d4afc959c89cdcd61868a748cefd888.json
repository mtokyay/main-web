{"ast":null,"code":"var _jsxFileName = \"/Users/mehmettokyay/Documents/new-theme-react/main-website/src/util/theme.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React from \"react\";\nimport { useTheme, createTheme, ThemeProvider as MuiThemeProvider } from \"@material-ui/core/styles\";\nimport * as colors from \"@material-ui/core/colors\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport { createLocalStorageStateHook } from \"use-local-storage-state\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst themeConfig = {\n  // Light theme\n  light: {\n    palette: {\n      type: \"light\",\n      primary: {\n        // Use hue from colors or hex\n        main: colors.indigo[\"500\"]\n        // Uncomment to specify light/dark\n        // shades instead of automatically\n        // calculating from above value.\n        //light: \"#4791db\",\n        //dark: \"#115293\",\n      },\n\n      secondary: {\n        main: colors.pink[\"500\"]\n      },\n      background: {\n        // Background for <body>\n        // and <Section color=\"default\">\n        default: \"#fff\",\n        // Background for elevated\n        // components (<Card>, etc)\n        paper: \"#fff\"\n      }\n    }\n  },\n  // Dark theme\n  dark: {\n    palette: {\n      type: \"dark\",\n      primary: {\n        // Same as in light but we could\n        // adjust color hue if needed\n        main: colors.indigo[\"500\"]\n      },\n      secondary: {\n        main: colors.pink[\"500\"]\n      },\n      background: {\n        default: colors.grey[\"900\"],\n        paper: colors.grey[\"800\"]\n      }\n    }\n  },\n  // Values for both themes\n  common: {\n    typography: {\n      fontSize: 14,\n      fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif'\n      // Uncomment to make button lowercase\n      // button: { textTransform: \"none\" },\n    },\n\n    breakpoints: {\n      values: {\n        xs: 0,\n        sm: 600,\n        md: 960,\n        lg: 1200,\n        xl: 1920\n      }\n    },\n    // Override component styles\n    overrides: {\n      // Global styles\n      MuiCssBaseline: {\n        \"@global\": {\n          \"#root\": {\n            // Flex column that is height\n            // of viewport so that footer\n            // can push self to bottom by\n            // with auto margin-top\n            minHeight: \"100vh\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            // Prevent child elements from\n            // shrinking when content\n            // is taller than the screen\n            // (quirk of flex parent)\n            \"& > *\": {\n              flexShrink: 0\n            }\n          }\n        }\n      }\n    }\n  }\n};\nfunction getTheme(name) {\n  // Create MUI theme from themeConfig\n  return createTheme({\n    ...themeConfig[name],\n    // Merge in common values\n    ...themeConfig.common,\n    overrides: {\n      // Merge overrides\n      ...(themeConfig[name] && themeConfig[name].overrides),\n      ...(themeConfig.common && themeConfig.common.overrides)\n    }\n  });\n}\n\n// Create a local storage hook for dark mode preference\nconst useDarkModeStorage = createLocalStorageStateHook(\"isDarkMode\");\nexport const ThemeProvider = props => {\n  _s();\n  // Get system dark mode preference\n  const prefersDarkMode = useMediaQuery(\"(prefers-color-scheme: dark)\", {\n    noSsr: true\n  });\n\n  // Get stored dark mode preference\n  let [isDarkModeStored, setIsDarkModeStored] = useDarkModeStorage();\n\n  // Use stored dark mode with fallback to system preference\n  const isDarkMode = isDarkModeStored === undefined ? prefersDarkMode : isDarkModeStored;\n\n  // Get MUI theme object\n  const themeName = isDarkMode ? \"dark\" : \"light\";\n  const theme = getTheme(themeName);\n\n  // Add toggle function to theme object\n  theme.palette.toggle = () => setIsDarkModeStored(value => !value);\n  return /*#__PURE__*/_jsxDEV(MuiThemeProvider, {\n    theme: theme,\n    children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), props.children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook for detecting dark mode and toggling between light/dark\n// More convenient than reading theme.palette.type from useTheme\n_s(ThemeProvider, \"VYWar4jzFggWM8BXTOKcYEnUE/g=\", false, function () {\n  return [useMediaQuery, useDarkModeStorage];\n});\n_c = ThemeProvider;\nexport function useDarkMode() {\n  _s2();\n  // Get current Material UI theme\n  const theme = useTheme();\n  // Check if it's the dark theme\n  const isDarkMode = theme.palette.type === \"dark\";\n  // Return object containing dark mode value and toggle function\n  return {\n    value: isDarkMode,\n    toggle: theme.palette.toggle\n  };\n}\n_s2(useDarkMode, \"VrMvFCCB9Haniz3VCRPNUiCauHs=\", false, function () {\n  return [useTheme];\n});\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","useTheme","createTheme","ThemeProvider","MuiThemeProvider","colors","CssBaseline","useMediaQuery","createLocalStorageStateHook","jsxDEV","_jsxDEV","themeConfig","light","palette","type","primary","main","indigo","secondary","pink","background","default","paper","dark","grey","common","typography","fontSize","fontFamily","breakpoints","values","xs","sm","md","lg","xl","overrides","MuiCssBaseline","minHeight","display","flexDirection","flexShrink","getTheme","name","useDarkModeStorage","props","_s","prefersDarkMode","noSsr","isDarkModeStored","setIsDarkModeStored","isDarkMode","undefined","themeName","theme","toggle","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","useDarkMode","_s2","$RefreshReg$"],"sources":["/Users/mehmettokyay/Documents/new-theme-react/main-website/src/util/theme.js"],"sourcesContent":["import React from \"react\";\nimport {\n  useTheme,\n  createTheme,\n  ThemeProvider as MuiThemeProvider,\n} from \"@material-ui/core/styles\";\nimport * as colors from \"@material-ui/core/colors\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport { createLocalStorageStateHook } from \"use-local-storage-state\";\n\nconst themeConfig = {\n  // Light theme\n  light: {\n    palette: {\n      type: \"light\",\n      primary: {\n        // Use hue from colors or hex\n        main: colors.indigo[\"500\"],\n        // Uncomment to specify light/dark\n        // shades instead of automatically\n        // calculating from above value.\n        //light: \"#4791db\",\n        //dark: \"#115293\",\n      },\n      secondary: {\n        main: colors.pink[\"500\"],\n      },\n      background: {\n        // Background for <body>\n        // and <Section color=\"default\">\n        default: \"#fff\",\n        // Background for elevated\n        // components (<Card>, etc)\n        paper: \"#fff\",\n      },\n    },\n  },\n\n  // Dark theme\n  dark: {\n    palette: {\n      type: \"dark\",\n      primary: {\n        // Same as in light but we could\n        // adjust color hue if needed\n        main: colors.indigo[\"500\"],\n      },\n      secondary: {\n        main: colors.pink[\"500\"],\n      },\n      background: {\n        default: colors.grey[\"900\"],\n        paper: colors.grey[\"800\"],\n      },\n    },\n  },\n\n  // Values for both themes\n  common: {\n    typography: {\n      fontSize: 14,\n      fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n      // Uncomment to make button lowercase\n      // button: { textTransform: \"none\" },\n    },\n    breakpoints: {\n      values: {\n        xs: 0,\n        sm: 600,\n        md: 960,\n        lg: 1200,\n        xl: 1920,\n      },\n    },\n    // Override component styles\n    overrides: {\n      // Global styles\n      MuiCssBaseline: {\n        \"@global\": {\n          \"#root\": {\n            // Flex column that is height\n            // of viewport so that footer\n            // can push self to bottom by\n            // with auto margin-top\n            minHeight: \"100vh\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            // Prevent child elements from\n            // shrinking when content\n            // is taller than the screen\n            // (quirk of flex parent)\n            \"& > *\": {\n              flexShrink: 0,\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nfunction getTheme(name) {\n  // Create MUI theme from themeConfig\n  return createTheme({\n    ...themeConfig[name],\n    // Merge in common values\n    ...themeConfig.common,\n    overrides: {\n      // Merge overrides\n      ...(themeConfig[name] && themeConfig[name].overrides),\n      ...(themeConfig.common && themeConfig.common.overrides),\n    },\n  });\n}\n\n// Create a local storage hook for dark mode preference\nconst useDarkModeStorage = createLocalStorageStateHook(\"isDarkMode\");\n\nexport const ThemeProvider = (props) => {\n  // Get system dark mode preference\n  const prefersDarkMode = useMediaQuery(\"(prefers-color-scheme: dark)\", {\n    noSsr: true,\n  });\n\n  // Get stored dark mode preference\n  let [isDarkModeStored, setIsDarkModeStored] = useDarkModeStorage();\n\n  // Use stored dark mode with fallback to system preference\n  const isDarkMode =\n    isDarkModeStored === undefined ? prefersDarkMode : isDarkModeStored;\n\n  // Get MUI theme object\n  const themeName = isDarkMode ? \"dark\" : \"light\";\n  const theme = getTheme(themeName);\n\n  // Add toggle function to theme object\n  theme.palette.toggle = () => setIsDarkModeStored((value) => !value);\n\n  return (\n    <MuiThemeProvider theme={theme}>\n      {/* Set global MUI styles */}\n      <CssBaseline />\n      {props.children}\n    </MuiThemeProvider>\n  );\n};\n\n// Hook for detecting dark mode and toggling between light/dark\n// More convenient than reading theme.palette.type from useTheme\nexport function useDarkMode() {\n  // Get current Material UI theme\n  const theme = useTheme();\n  // Check if it's the dark theme\n  const isDarkMode = theme.palette.type === \"dark\";\n  // Return object containing dark mode value and toggle function\n  return { value: isDarkMode, toggle: theme.palette.toggle };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}