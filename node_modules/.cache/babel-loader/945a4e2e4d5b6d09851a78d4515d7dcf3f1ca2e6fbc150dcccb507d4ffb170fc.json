{"ast":null,"code":"import storage from './storage';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nexport default function useLocalStorageStateBase(key, defaultValue) {\n  // we don't support updating the `defaultValue` the same way `useState()` doesn't support it\n  const [defaultValueState] = useState(() => {\n    const isCallable = value => typeof value === 'function';\n    return isCallable(defaultValue) ? defaultValue() : defaultValue;\n  });\n  const getDefaultState = useCallback(() => {\n    return {\n      value: storage.get(key, defaultValueState),\n      isPersistent: (() => {\n        /**\n         * We want to return `true` on the server. If you render a message based on `isPersistent` and the\n         * server returns `false` then the message will flicker until hydration is done:\n         * `{!isPersistent && <span>You changes aren't being persisted.</span>}`\n         */\n        if (typeof window === 'undefined') {\n          return true;\n        }\n        try {\n          localStorage.setItem('__ulss', '#');\n          localStorage.removeItem('__ulss');\n          return true;\n        } catch (_a) {\n          return false;\n        }\n      })()\n    };\n  }, [defaultValueState, key]);\n  const [state, setState] = useState(getDefaultState);\n  const updateValue = useMemo(() => {\n    const fn = newValue => {\n      const isCallable = value => typeof value === 'function';\n      if (isCallable(newValue)) {\n        setState(state => ({\n          value: newValue(state.value),\n          isPersistent: storage.set(key, newValue(state.value))\n        }));\n      } else {\n        setState({\n          value: newValue,\n          isPersistent: storage.set(key, newValue)\n        });\n      }\n    };\n    fn.reset = () => {\n      storage.remove(key);\n      setState(state => ({\n        value: defaultValueState,\n        isPersistent: state.isPersistent\n      }));\n    };\n    return fn;\n  }, [key, defaultValueState]);\n  /**\n   * Syncs changes across tabs and iframe's.\n   */\n  useEffect(() => {\n    const onStorage = e => {\n      if (e.storageArea === localStorage && e.key === key) {\n        setState({\n          value: storage.get(key, defaultValueState),\n          isPersistent: true\n        });\n      }\n    };\n    window.addEventListener('storage', onStorage);\n    return () => window.removeEventListener('storage', onStorage);\n  }, [key, defaultValueState]);\n  /**\n   * Update the state when the `key` property changes.\n   */\n  const isFirstRender = useRef(true);\n  useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    setState(getDefaultState());\n  }, [getDefaultState]);\n  return [state.value, updateValue, state.isPersistent];\n}","map":{"version":3,"names":["storage","useCallback","useEffect","useMemo","useRef","useState","useLocalStorageStateBase","key","defaultValue","defaultValueState","isCallable","value","getDefaultState","get","isPersistent","window","localStorage","setItem","removeItem","_a","state","setState","updateValue","fn","newValue","set","reset","remove","onStorage","e","storageArea","addEventListener","removeEventListener","isFirstRender","current"],"sources":["/Users/mehmettokyay/Documents/new-theme-react/main-web/node_modules/use-local-storage-state/es/src/useLocalStorageStateBase.js"],"sourcesContent":["import storage from './storage';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nexport default function useLocalStorageStateBase(key, defaultValue) {\n    // we don't support updating the `defaultValue` the same way `useState()` doesn't support it\n    const [defaultValueState] = useState(() => {\n        const isCallable = (value) => typeof value === 'function';\n        return isCallable(defaultValue) ? defaultValue() : defaultValue;\n    });\n    const getDefaultState = useCallback(() => {\n        return {\n            value: storage.get(key, defaultValueState),\n            isPersistent: (() => {\n                /**\n                 * We want to return `true` on the server. If you render a message based on `isPersistent` and the\n                 * server returns `false` then the message will flicker until hydration is done:\n                 * `{!isPersistent && <span>You changes aren't being persisted.</span>}`\n                 */\n                if (typeof window === 'undefined') {\n                    return true;\n                }\n                try {\n                    localStorage.setItem('__ulss', '#');\n                    localStorage.removeItem('__ulss');\n                    return true;\n                }\n                catch (_a) {\n                    return false;\n                }\n            })(),\n        };\n    }, [defaultValueState, key]);\n    const [state, setState] = useState(getDefaultState);\n    const updateValue = useMemo(() => {\n        const fn = (newValue) => {\n            const isCallable = (value) => typeof value === 'function';\n            if (isCallable(newValue)) {\n                setState((state) => ({\n                    value: newValue(state.value),\n                    isPersistent: storage.set(key, newValue(state.value)),\n                }));\n            }\n            else {\n                setState({\n                    value: newValue,\n                    isPersistent: storage.set(key, newValue),\n                });\n            }\n        };\n        fn.reset = () => {\n            storage.remove(key);\n            setState((state) => ({\n                value: defaultValueState,\n                isPersistent: state.isPersistent,\n            }));\n        };\n        return fn;\n    }, [key, defaultValueState]);\n    /**\n     * Syncs changes across tabs and iframe's.\n     */\n    useEffect(() => {\n        const onStorage = (e) => {\n            if (e.storageArea === localStorage && e.key === key) {\n                setState({\n                    value: storage.get(key, defaultValueState),\n                    isPersistent: true,\n                });\n            }\n        };\n        window.addEventListener('storage', onStorage);\n        return () => window.removeEventListener('storage', onStorage);\n    }, [key, defaultValueState]);\n    /**\n     * Update the state when the `key` property changes.\n     */\n    const isFirstRender = useRef(true);\n    useEffect(() => {\n        if (isFirstRender.current) {\n            isFirstRender.current = false;\n            return;\n        }\n        setState(getDefaultState());\n    }, [getDefaultState]);\n    return [state.value, updateValue, state.isPersistent];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}