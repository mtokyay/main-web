{"ast":null,"code":"var _jsxFileName = \"/Users/mehmettokyay/Documents/new-theme-react/main-web/src/components/Meta.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useRouter } from \"./../util/router.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Meta(props) {\n  _s();\n  const {\n    children,\n    ...customPageMeta\n  } = props;\n  const router = useRouter();\n\n  // Meta values that are the same across all pages\n  const globalMeta = {\n    // Site name\n    siteName: \"My App\",\n    // Your production domain (example: https://myapp.com)\n    domain: \"\",\n    // Your Twitter handle (example: @divjoy)\n    twitterHandle: \"\"\n  };\n\n  // Default meta values for current page (override with props)\n  const defaultPageMeta = {\n    // Page title\n    title: \"My App\",\n    // Page description\n    description: \"My app description\",\n    // Social share image (create this file in /public/images/)\n    image: \"/images/social.png\",\n    // Page type (see https://ogp.me/#types)\n    type: \"website\"\n  };\n\n  // Construct meta object from global, default, and custom meta\n  const meta = {\n    ...globalMeta,\n    ...defaultPageMeta,\n    ...customPageMeta\n  };\n\n  // Note: Each tag should have a unique `key` so that they are de-deduped if other\n  // `Meta` components are rendered on the same page or within nested components.\n  // prettier-ignore\n  return /*#__PURE__*/_jsxDEV(Helmet, {\n    children: [/*#__PURE__*/_jsxDEV(\"title\", {\n      children: meta.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n      content: meta.description,\n      name: \"description\"\n    }, \"description\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), meta.domain && /*#__PURE__*/_jsxDEV(\"link\", {\n      rel: \"canonical\",\n      href: `${meta.domain}${router.pathname}${router.location.search}`\n    }, \"canonical\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n      property: \"og:title\",\n      content: meta.title\n    }, \"og-title\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n      property: \"og:description\",\n      content: meta.description\n    }, \"og-description\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n      property: \"og:site_name\",\n      content: meta.siteName\n    }, \"og-site-name\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n      property: \"og:type\",\n      content: \"website\"\n    }, \"og-type\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), meta.domain && /*#__PURE__*/_jsxDEV(\"meta\", {\n      property: \"og:url\",\n      content: `${meta.domain}${router.pathname}${router.location.search}`\n    }, \"og-url\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 23\n    }, this), meta.domain && meta.image && /*#__PURE__*/_jsxDEV(\"meta\", {\n      property: \"og:image\",\n      content: `${meta.domain}${meta.image}`\n    }, \"og-image\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 37\n    }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n      name: \"twitter:title\",\n      content: meta.title\n    }, \"twitter-title\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n      name: \"twitter:description\",\n      content: meta.description\n    }, \"twitter-description\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n      name: \"twitter:card\",\n      content: \"summary_large_image\"\n    }, \"twitter-card\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), meta.twitterHandle && /*#__PURE__*/_jsxDEV(\"meta\", {\n      name: \"twitter:site\",\n      content: meta.twitterHandle\n    }, \"twitter-site\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 30\n    }, this), meta.domain && meta.image && /*#__PURE__*/_jsxDEV(\"meta\", {\n      name: \"twitter:image\",\n      content: `${meta.domain}${meta.image}`\n    }, \"twitter-image\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 37\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(Meta, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n});\n_c = Meta;\nexport default Meta;\nvar _c;\n$RefreshReg$(_c, \"Meta\");","map":{"version":3,"names":["React","Helmet","useRouter","jsxDEV","_jsxDEV","Meta","props","_s","children","customPageMeta","router","globalMeta","siteName","domain","twitterHandle","defaultPageMeta","title","description","image","type","meta","fileName","_jsxFileName","lineNumber","columnNumber","content","name","rel","href","pathname","location","search","property","_c","$RefreshReg$"],"sources":["/Users/mehmettokyay/Documents/new-theme-react/main-web/src/components/Meta.js"],"sourcesContent":["import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useRouter } from \"./../util/router.js\";\n\nfunction Meta(props) {\n  const { children, ...customPageMeta } = props;\n  const router = useRouter();\n\n  // Meta values that are the same across all pages\n  const globalMeta = {\n    // Site name\n    siteName: \"My App\",\n    // Your production domain (example: https://myapp.com)\n    domain: \"\",\n    // Your Twitter handle (example: @divjoy)\n    twitterHandle: \"\",\n  };\n\n  // Default meta values for current page (override with props)\n  const defaultPageMeta = {\n    // Page title\n    title: \"My App\",\n    // Page description\n    description: \"My app description\",\n    // Social share image (create this file in /public/images/)\n    image: \"/images/social.png\",\n    // Page type (see https://ogp.me/#types)\n    type: \"website\",\n  };\n\n  // Construct meta object from global, default, and custom meta\n  const meta = { ...globalMeta, ...defaultPageMeta, ...customPageMeta };\n\n  // Note: Each tag should have a unique `key` so that they are de-deduped if other\n  // `Meta` components are rendered on the same page or within nested components.\n  // prettier-ignore\n  return (\n    <Helmet>\n      <title>{meta.title}</title>\n      <meta content={meta.description} name=\"description\" key=\"description\" />\n      {meta.domain && <link rel=\"canonical\" href={`${meta.domain}${router.pathname}${router.location.search}`} key=\"canonical\" />}\n\n      {/* Open Graph */}\n      <meta property=\"og:title\" content={meta.title} key=\"og-title\" />\n      <meta property=\"og:description\" content={meta.description} key=\"og-description\" />\n      <meta property=\"og:site_name\" content={meta.siteName} key=\"og-site-name\" />\n      <meta property=\"og:type\" content=\"website\" key=\"og-type\" />\n      {meta.domain && <meta property=\"og:url\" content={`${meta.domain}${router.pathname}${router.location.search}`} key=\"og-url\" />}\n      {meta.domain && meta.image && <meta property=\"og:image\" content={`${meta.domain}${meta.image}`} key=\"og-image\" />}\n\n      {/* Twitter */}\n      <meta name=\"twitter:title\" content={meta.title} key=\"twitter-title\" />\n      <meta name=\"twitter:description\" content={meta.description} key=\"twitter-description\"/>\n      <meta name=\"twitter:card\" content=\"summary_large_image\" key=\"twitter-card\" />\n      {meta.twitterHandle && <meta name=\"twitter:site\" content={meta.twitterHandle} key=\"twitter-site\" />}\n      {meta.domain && meta.image && <meta name=\"twitter:image\" content={`${meta.domain}${meta.image}`} key=\"twitter-image\" />}\n    </Helmet>\n  );\n}\n\nexport default Meta;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}